heat_template_version: rocky

description: >
  OpenStack containerized Ceilometer Agent Notification service

parameters:
  ContainerCeilometerNotificationImage:
    description: image
    type: string
  ContainerCeilometerConfigImage:
    description: The container image to use for the ceilometer config_volume
    type: string
  CeilometerAgentNotificationLoggingSource:
    type: json
    default:
      tag: openstack.ceilometer.agent.notification
      file: /var/log/containers/ceilometer/agent-notification.log
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  CeilometerEnablePanko:
    default: true
    description: Check if panko need to be enabled or not.
    type: boolean
  MonitoringSubscriptionCeilometerNotification:
    default: 'overcloud-ceilometer-agent-notification'
    type: string

resources:

  ContainersCommon:
    type: ../containers-common.yaml

  CeilometerServiceBase:
    type: ./ceilometer-base-container-puppet.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

conditions:
  ceilometer_enable_panko: {equals: [{get_param: CeilometerEnablePanko}, True]}

outputs:
  role_data:
    description: Role data for the Ceilometer Agent Notification role.
    value:
      service_name: ceilometer_agent_notification
      monitoring_subscription: {get_param: MonitoringSubscriptionCeilometerNotification}
      config_settings:
        get_attr: [CeilometerServiceBase, role_data, config_settings]
      service_config_settings:
        map_merge:
          - get_attr: [CeilometerServiceBase, role_data, service_config_settings]
          - rsyslog:
              tripleo_logging_sources_ceilometer_agent_notification:
                - {get_param: CeilometerAgentNotificationLoggingSource}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: ceilometer
        puppet_tags: ceilometer_config
        step_config: |
          include ::tripleo::profile::base::ceilometer::agent::notification
        config_image: {get_param: ContainerCeilometerConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/ceilometer_agent_notification.json:
          command: /usr/bin/ceilometer-agent-notification --logfile /var/log/ceilometer/agent-notification.log
          config_files:
            list_concat:
              - - source: "/var/lib/kolla/config_files/src/*"
                  dest: "/"
                  merge: true
                  preserve_properties: true
              - if:
                  - ceilometer_enable_panko
                  - - source: "/var/lib/kolla/config_files/src-panko/*"
                      dest: "/"
                      merge: true
                      preserve_properties: true
                  - null

          permissions:
            - path: /etc/panko
              owner: root:ceilometer
              recurse: true
      docker_config:
        step_3:
          ceilometer_init_log:
            start_order: 0
            image: &ceilometer_agent_notification_image {get_param: ContainerCeilometerNotificationImage}
            net: none
            user: root
            command: ['/bin/bash', '-c', 'chown -R ceilometer:ceilometer /var/log/ceilometer']
            volumes:
              - /var/log/containers/ceilometer:/var/log/ceilometer:z
        step_4:
          ceilometer_agent_notification:
            image: *ceilometer_agent_notification_image
            net: host
            privileged: false
            restart: always
            healthcheck: {get_attr: [ContainersCommon, healthcheck_rpc_port]}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/ceilometer_agent_notification.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/ceilometer/:/var/lib/kolla/config_files/src:ro
                  - /var/lib/config-data/puppet-generated/panko/:/var/lib/kolla/config_files/src-panko:ro
                  - /var/log/containers/ceilometer:/var/log/ceilometer:z
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
          with_items:
            - { 'path': /var/log/containers/ceilometer, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/log/ceilometer, 'setype': svirt_sandbox_file_t }
        - name: ceilometer logs readme
          copy:
            dest: /var/log/ceilometer/readme.txt
            content: |
              Log files from ceilometer containers can be found under
              /var/log/containers/ceilometer.
          ignore_errors: true
        - name: enable virt_sandbox_use_netlink for healthcheck
          seboolean:
            name: virt_sandbox_use_netlink
            persistent: yes
            state: yes
      external_upgrade_tasks:
        - when:
            - step|int == 1
          tags:
            - never
            - system_upgrade_transfer_data
            - system_upgrade_stop_services
          block:
            - name: Stop ceilometer agent notification container
              import_role:
                name: tripleo-container-stop
              vars:
                tripleo_containers_to_stop:
                  - ceilometer_agent_notification
                tripleo_delegate_to: "{{ groups['ceilometer_agent_notification'] | default([]) }}"
      fast_forward_upgrade_tasks:
        - when:
            - step|int == 0
            - release == 'rocky'
          block:
            - name: FFU check if openstack-ceilometer-notification is deployed
              command: systemctl is-enabled openstack-ceilometer-notification
              ignore_errors: True
              register: ceilometer_agent_notification_enabled_result
            - name: Set fact ceilometer_agent_notification_enabled
              set_fact:
                ceilometer_agent_notification_enabled: "{{ ceilometer_agent_notification_enabled_result.rc == 0 }}"
        - name: FFU stop and diable openstack-ceilometer-notification service
          when:
            - step|int == 1
            - release == 'rocky'
            - ceilometer_agent_notification_enabled|bool
          service: name=openstack-ceilometer-notification state=stopped enabled=no
